extends layout

block content
	script(src="/static/javascripts/d3/d3.js")
	
	div(class="row-fluid")
		select

	div(class="row-fluid")
		h3 week
		div(class="hero-unit")
			small
				span(id="placeholder_week")

	div(class="row-fluid")
		h3 month
		div(class="hero-unit")
			small
				span(id="placeholder_month")

	div(class="row-fluid")
		h3 year
		div(class="hero-unit")
			small
				span(id="placeholder_year")

	script(type="text/javascript")
		drawAll("netz39");
		d3.json("/spaces/_design/all/_view/json", function(err, res) {
			if(err)
				console.log(err);
			else {
				data = res.rows;
				console.log(data);
				var sel = d3.select("select");
				sel.selectAll("option")
					.data(data)
					.enter().append("option")
					.attr("value", function(d) {
						return d.value._id;
					})
					.text(function(d) {
						return d.value.name;
					});
				sel.on('change', function() {
					var v = sel.node().options[sel.node().options.selectedIndex].value;
					console.log(v);
					drawAll(v);
				});
			}
		});
			
		function drawAll(spacename) {
			d3.selectAll("svg").remove();
			d3.json("/"+spacename+"/_design/space/_view/all?startkey="+((new Date()).getTime() - 7 * 24 * 60 * 60 * 1000)/1000 + "&endkey="+ (new Date()).getTime()/1000 ,function(err, res) {
				if(err)
					console.log(err);
				else {
					data = res.rows;
					if(data[0])
						drawStuff(res.rows.sort(function(a,b) {
							return a.value.lastchange*1000 - b.value.lastchange*1000;
						}), "placeholder_week", 7);
				}
			});
			d3.json("/"+spacename+"/_design/space/_view/all?startkey="+((new Date()).getTime() - 30 * 24 * 60 * 60 * 1000)/1000 + "&endkey="+ (new Date()).getTime()/1000, function(err, res) {
				if(err)
					console.log(err);
				else {
					data = res.rows;
					if(data[0])
						drawStuff(res.rows.sort(function(a,b) {
							return a.value.lastchange*1000 - b.value.lastchange*1000;
						}), "placeholder_month", 7);
				}
			});
			
			d3.json("/"+spacename+"/_design/space/_view/all?startkey="+((new Date()).getTime() - 356 * 24 * 60 * 60 * 1000)/1000 + "&endkey="+ (new Date()).getTime()/1000, function(err, res) {
				if(err)
					console.log(err);
				else {
					data = res.rows;
					if(data[0]) 
						drawStuff(res.rows.sort(function(a,b) {
							return a.value.lastchange*1000 - b.value.lastchange*1000;
						}), "placeholder_year", 7);
				}
			});
		}
		
		function getHours(data) {
			if(data.length < 2)
				return [];
			var hours = [];
			for(var i = 0; i<24; i++) {
				hours.push({
					id : i,
					open : 0,
					close : 0
				});
			}
			var i = 0;
			var h = new Date(data[i].value.lastchange*1000);
			var current = data[i].value.open;
			h.setMinutes(0);
			h.setSeconds(0);
			h = h.getTime() + 60 * 60 * 1000;
			var next = data[1].value.lastchange*1000;

			while(h < (new Date()).getTime()) {
				if(h > next) {
					i++;
					current = data[i].value.open;
					if(data[i+1] == null) {
						next = new Date().getTime();
					} else {
						next = data[i+1].value.lastchange*1000;
					}
				} else {
					hours[(new Date(h)).getHours()][current ? "open" : "close"]++;
					h += 60 * 60 * 1000;
				}
			}
			return hours;
		};

		function drawStuff(data, placeholder, num_ticks) {
			var x = d3.time.scale()
				.domain([d3.min(data, function(d) {
					return new Date(d.value.lastchange*1000);
				}), new Date()])
				.range([0,window.innerWidth - 200]);
			var chart = d3.select("span#" + placeholder).append("svg")
				.attr("height", 70)
				.attr("width", window.innerWidth - 200)
			chart.selectAll("rect")
				.data(data)
				.enter().append("rect")
				.attr("y", 20)
				.attr("x", function(d, i) {
					return x(new Date(d.value.lastchange*1000))
				})
				.attr("width", function(d, i) {
					if(i+1 < data.length) {
						return x(data[i+1].value.lastchange*1000) - x(d.value.lastchange*1000)
					}
					return x(new Date()) - x(d.value.lastchange*1000);
				})
				.attr("height", 30)
				.attr("style", function(d) {
					if(d.value.open) {
						return "fill : #0c0";
					}
					return "fill : #b00";
				})
			
			chart.selectAll("line").data(x.ticks(num_ticks))
				.enter().append("line")
				.attr("x1", x)
				.attr("x2", x)
				.attr("y1", 14)
				.attr("y2", 50)
				.attr("style", "stroke: #ccc");

			chart.selectAll(".rule")
				.data(x.ticks(num_ticks))
				.enter().append("text")
				.attr("class", "rule")
				.attr("x", x)
				.attr("y", 12)
				.attr("text-anchor", "middle")
				.text(function(d) {
					return (new Date(d)).toLocaleDateString();
				});

			var open_time = 0;
			var closed_time = 0;
			for(var i = 0; i < (data.length - 1); i++) {
				timediff = data[i+1].value.lastchange*1000 - data[i].value.lastchange*1000;
				if(data[i].value.open)
					open_time += timediff;
				else
					closed_time += timediff;
			}
			console.log(data);
			if(data[data.length -1].value.open) {
				open_time += (new Date()).getTime()- data[data.length - 1].value.lastchange*1000;
			} else {
				closed_time +=  (new Date()).getTime() - data[data.length - 1].value.lastchange*1000;
			}

			svg = d3.select("span#" + placeholder)
				.append("svg")
				.attr("width", 300)
				.attr("height", 150)
			.append("g")
				.attr("transform", "translate(150, 150)");  

			var pie = d3.layout.pie()
				.sort(null)
				.value(function(d) { return d.time; })
				.startAngle(-1 * Math.PI / 2)
				.endAngle(Math.PI / 2);

			var arc = d3.svg.arc()
				.outerRadius(150 - 5)
				.innerRadius(150 - 55)
				
			var g = svg.selectAll(".arc")
				.data(pie([{open: true, time: open_time}, {open: false, time: closed_time}]))
				.enter().append("g")
				.attr("class", "arc");

			g.append("path")
				.attr("d", arc)
				.style("fill", function(d) {
					if(d.data.open)
						return "#0c0"
					return "#b00"
				});

			g.append("text")
				.attr("transform", function(d) { return "translate(" + arc.centroid(d) + ")"; })
				.attr("dy", ".35em")
				.style("text-anchor", "middle")
				.text(function(d) { return (d.data.open ? "open " : "closed ") + (100 * d.data.time / (open_time + closed_time)).toFixed(2) + "%";})
			
			var chart = d3.select("span#" + placeholder).append("svg")
				.attr("height", 220)
				.attr("width", 800)
		
			var x = d3.scale.linear()
				.domain([0,23])
				.range([100,700]);

			chart.selectAll("rect")
				.data(getHours(data))
				.enter().append("rect")
				.attr("y", function(d) {
					return 220 - 200 * d.open / (d.open + d.close);
				})
				.attr("x", function(d, i) {
					return x(d.id)
				})
				.attr("width", 25)
				.attr("height", function(d) {
					return 200 * d.open / (d.open + d.close);
				})
				.attr("style", "fill: #0c0")
				.append("svg:title").text(function(d) {
					return (d.open / (d.open + d.close) * 100).toFixed(2) + "%";
				});
				
			chart.selectAll("text")
				.data(getHours(data))
				.enter().append("text")
				.attr("x", function (d, i) {
					return x(d.id) + 10;
				})
				.attr("y", 20)
				.style("text-anchor", "middle")
				.text(function(d) {return d.id;});

		}




